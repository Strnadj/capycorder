// Generated by CoffeeScript 1.10.0
(function() {
  var RecorderUI,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  RecorderUI = (function() {
    RecorderUI.prototype.$ui = null;

    RecorderUI.prototype.delayToHide = 5;

    RecorderUI.prototype.hideAfter = null;

    RecorderUI.prototype.getTemplate = function() {
      return "<div id=\"capycorder\">\n  <form action=\"#\" method=\"POST\" class=\"prompt-name\">\n    <div class=\"capycorder-label\">\n      <img src=\"" + (this.chrome.extension.getURL('images/button_off.png')) + "\" />\n      Name your test. It\n    </div>\n    <div class=\"capycorder-input-wrapper\">\n      <input type=\"text\" id=\"capycorder-spec-name\" placeholder=\"should do something\" />\n    </div>\n    <div class=\"capycorder-actions\">\n      <a href=\"#\" class=\"cancel\">Cancel</a>\n      <button type=\"submit\">OK</button>\n    </div>\n  </form>\n  <div class=\"capture-actions\">\n    <div>\n      <img src=\"" + (this.chrome.extension.getURL('images/button_capture_actions.png')) + "\" />\n      Interact with the page to record actions.\n    </div>\n  </div>\n  <div class=\"capture-matchers\">\n    <div>\n      <img src=\"" + (this.chrome.extension.getURL('images/button_capture_matchers.png')) + "\" />\n      Select text ranges or elements to record matchers.\n    </div>\n </div>\n  <div class=\"generate\">\n    <div>\n      <img src=\"" + (this.chrome.extension.getURL('images/button_generate.png')) + "\" />\n      Thanks! The recorded spec has been copied to the clipboard.\n    </div>\n  </div>\n</div>";
    };

    function RecorderUI(options) {
      this._hideVisible = bind(this._hideVisible, this);
      this.chrome = options.chrome;
      this.create();
    }

    RecorderUI.prototype._created = false;

    RecorderUI.prototype.create = function() {
      if (!this._created && window.top === window.self) {
        this.$ui = $(this.getTemplate());
        this.$ui.appendTo('body').find('> div, > form').hide();
        return this._created = true;
      }
    };

    RecorderUI.prototype.showNamePrompt = function(block) {
      if (block == null) {
        block = function() {};
      }
      return this._hideVisible((function(_this) {
        return function() {
          var $visible;
          $visible = _this.$ui.find('.prompt-name').show();
          _this._showUI(function() {
            return _this.$ui.find('.prompt-name input').trigger('focus');
          });
          return $visible.find('input').val('').end().find('a').one('click', function() {
            _this._hideVisible();
            return block(null);
          }).end().one('submit', function(e) {
            var name;
            e.preventDefault();
            name = $visible.find('#capycorder-spec-name').val();
            _this._hideVisible();
            return block(name);
          });
        };
      })(this));
    };

    RecorderUI.prototype.show = function(state) {
      return this._hideVisible((function(_this) {
        return function() {
          var selector;
          selector = "." + (state.replace('.', '-'));
          _this.$ui.find(selector).show();
          _this._showUI();
          _this.$ui.one('mouseover.recorderui', function() {
            return _this._hideVisible();
          });
          return _this.hideAfter = setTimeout(_this._hideVisible, _this.delayToHide * 1000);
        };
      })(this));
    };

    RecorderUI.prototype._showUI = function(block) {
      if (block == null) {
        block = function() {};
      }
      return this.$ui.animate({
        marginTop: '0px'
      }, 250, (function(_this) {
        return function() {
          return block();
        };
      })(this));
    };

    RecorderUI.prototype._hideUI = function(block) {
      if (block == null) {
        block = function() {};
      }
      return this.$ui.animate({
        marginTop: '-200px'
      }, 250, (function(_this) {
        return function() {
          return block();
        };
      })(this));
    };

    RecorderUI.prototype._hideVisible = function(block) {
      var $visible;
      if (block == null) {
        block = function() {};
      }
      if (this.hideAfter != null) {
        clearTimeout(this.hideAfter);
      }
      this.$ui.off('mouseover.recorderui');
      $visible = this.$ui.find('div:visible, form:visible');
      if ($visible.length) {
        return this._hideUI((function(_this) {
          return function() {
            $visible.hide();
            return block();
          };
        })(this));
      } else {
        return block();
      }
    };

    return RecorderUI;

  })();

  window.RecorderUI = RecorderUI;

}).call(this);
