// Generated by CoffeeScript 1.10.0
(function() {
  var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.Capybara || (window.Capybara = {});

  Capybara.Recorders || (Capybara.Recorders = {});

  Capybara.Recorders.Actions = (function() {
    Actions.prototype.actions = [];

    Actions.prototype.namespace = 'actionrecorder';

    Actions.prototype.events = {
      'change input[type=file]': 'attachFile',
      'change input[type=checkbox]': 'check',
      'click input[type=radio]': 'choose',
      'click input[type=submit]': 'clickButton',
      'click input[type=reset]': 'clickButton',
      'click input[type=button]': 'clickButton',
      'click button': 'clickButton',
      'click a': 'clickLink',
      'blur input[type=text]': 'fillIn',
      'blur input[type=password]': 'fillIn',
      'blur input[type=email]': 'fillIn',
      'blur input[type=search]': 'fillIn',
      'blur textarea': 'fillIn',
      'change select': 'select'
    };

    function Actions(options) {
      var ref;
      if (options == null) {
        options = {};
      }
      this.select = bind(this.select, this);
      this.fillIn = bind(this.fillIn, this);
      this.clickLink = bind(this.clickLink, this);
      this.clickButton = bind(this.clickButton, this);
      this.choose = bind(this.choose, this);
      this.uncheck = bind(this.uncheck, this);
      this.check = bind(this.check, this);
      this.attachFile = bind(this.attachFile, this);
      this.$scope = $(options.scope || document);
      this.afterCaptureCallback = (ref = options.afterCapture) != null ? ref : function() {};
    }

    Actions.prototype.start = function() {
      return this._attachEvents();
    };

    Actions.prototype.stop = function() {
      return this._detachEvents();
    };

    Actions.prototype.attachFile = function(e) {
      var $el, locator;
      $el = $(e.target);
      locator = $el.getLocator(['name', 'id', 'label']);
      return this.findScopeAndCapture('attachFile', $el, locator, {
        file: $el.val()
      });
    };

    Actions.prototype.check = function(e) {
      var $el, locator;
      $el = $(e.target);
      if ($el.is(':checked')) {
        locator = $el.getLocator(['name', 'id', 'label']);
        return this.findScopeAndCapture('check', $el, locator);
      } else {
        return this.uncheck(e);
      }
    };

    Actions.prototype.uncheck = function(e) {
      var $el, locator;
      $el = $(e.target);
      locator = $el.getLocator(['name', 'id', 'label']);
      return this.findScopeAndCapture('uncheck', $el, locator);
    };

    Actions.prototype.choose = function(e) {
      var $el, locator;
      $el = $(e.target);
      locator = $el.getLocator(['label', 'id', 'name']);
      return this.findScopeAndCapture('choose', $el, locator);
    };

    Actions.prototype.clickButton = function(e) {
      var $el, locator;
      $el = $(e.target);
      locator = $el.getLocator(['id', 'text', 'value']);
      return this.findScopeAndCapture('clickButton', $el, locator);
    };

    Actions.prototype.clickLink = function(e) {
      var $el, locator;
      $el = $(e.target);
      locator = $el.getLocator(['id', 'text', 'imgAlt']);
      return this.findScopeAndCapture('clickLink', $el, locator);
    };

    Actions.prototype.fillIn = function(e) {
      var $el, locator;
      $el = $(e.target);
      locator = $el.getLocator(['name', 'id', 'label']);
      return this.findScopeAndCapture('fillIn', $el, locator, {
        "with": $el.val()
      });
    };

    Actions.prototype.select = function(e) {
      var $el, locator;
      $el = $(e.target);
      locator = $el.getLocator(['name', 'id', 'label']);
      return this.findScopeAndCapture('select', $el, $el.val(), {
        from: locator
      });
    };

    Actions.prototype.findScopeAndCapture = function(name, $el, locator, options) {
      if (!($el.parents('#capycorder').length > 0)) {
        return this.capture(name, locator, this._formScope($el), options);
      }
    };

    Actions.prototype.capture = function(name, locator, scope, options) {
      var action;
      if (options == null) {
        options = {};
      }
      action = {
        type: 'action',
        name: name,
        locator: locator,
        scope: scope,
        options: options
      };
      this.actions.push(action);
      return this.afterCaptureCallback(action);
    };

    Actions.prototype._formScope = function($el) {
      var $form;
      if (($form = $el.parents('form')).length) {
        return $form.getLocator(['id']);
      } else {
        return null;
      }
    };

    Actions.prototype._nsevent = function(event) {
      return [event, this.namespace].join('.');
    };

    Actions.prototype._attachEvents = function() {
      var event, method, ref, ref1, results, selector, target;
      ref = this.events;
      results = [];
      for (target in ref) {
        method = ref[target];
        ref1 = target.split(' '), event = ref1[0], selector = ref1[1];
        results.push(this.$scope.delegate(selector, this._nsevent(event), this[method]));
      }
      return results;
    };

    Actions.prototype._detachEvents = function() {
      return this.$scope.undelegate("." + this.namespace);
    };

    return Actions;

  })();

}).call(this);
