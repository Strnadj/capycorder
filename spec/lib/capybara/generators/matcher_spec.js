// Generated by CoffeeScript 1.10.0
(function() {
  describe('Capybara matcher generator', function() {
    describe('#isScoped', function() {
      it('should return true if scope provided', function() {
        var generator;
        generator = new Capybara.Generators.Matcher({
          scope: '#foo'
        });
        return expect(generator.isScoped()).toBeTruthy();
      });
      return it('should return false if no scope provided', function() {
        var generator;
        generator = new Capybara.Generators.Matcher;
        return expect(generator.isScoped()).toBeFalsy();
      });
    });
    return describe('templates', function() {
      var allOptions, generator;
      generator = null;
      allOptions = {
        scope: '#foo',
        selector: '.foo.bar',
        options: {
          content: 'Foo bar'
        }
      };
      describe('#scopeTemplate', function() {
        beforeEach(function() {
          return generator = new Capybara.Generators.Matcher(allOptions);
        });
        it('should return an array', function() {
          return expect(typeof generator.scopeToPartials()).toBe('object');
        });
        return it('should match a tempate', function() {
          var out;
          out = generator.scopeToPartials();
          expect(out.length).toEqual(2);
          expect(out[0]).toBe("within_form('#foo') do");
          return expect(out[1]).toBe('end');
        });
      });
      return describe('#toString', function() {
        var expectations, method, results, template;
        expectations = {
          'shouldHaveSelector': "expect(page).to have_selector('.foo.bar')",
          'shouldHaveContent': "expect(page).to have_content('Foo bar')"
        };
        results = [];
        for (method in expectations) {
          template = expectations[method];
          results.push(it("should return correct template for " + method, function() {
            var options;
            options = _.extend(allOptions, {
              name: method
            });
            generator = new Capybara.Generators.Matcher(options);
            return expect(generator.toString()).toBe(template);
          }));
        }
        return results;
      });
    });
  });

}).call(this);
